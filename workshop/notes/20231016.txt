REST URL 설계
    하나의 엔티티인 경우
        해당 엔티티명을 기반으로 디렉토리를 생성하고, 컨트롤러, 유즈케이스별 서비스를 만들면ㄷ ㅚㅁ

    여러 엔티티가 연계된 것을 단일 디렉토리로 구현해야 하는 경우
        최상위에 그룹핑 이름을 설정하고 이것을 최상위 디렉토리로 만듬
        나머지는 하나의 엔티티인 경우와 동일하게 하면 됨

        예시 )
            problems, examples, submissions, testcases 가 각각 엔드포인트로 있는 경우
            각각은 관계성이 강하므로, 각각을 독립적인 디렉토리로 할 경우, 소스코드 참조가 난잡하게 됨
            4개를 동시에 표현할 경우, 소스코드가 너무 방대하게 됨


            problems, examples는 유저에게 표시되는 problem이라는 공통점이 있음
            submissions, testcases는 채점시에 사용되는 데이터라는 공통점이 있음

            problems, examples를 problemInfos라는 그룹으로 묶어서,
                problemInfos/problems, problemInfos/examples로 나눠서 각각을 rest 요청으로 만듬
            
            submissions, testcases를 problemMarks라는 그룹으로 묶어서
                problemMarks/submissions, problemMarks/testcases로 나눠서 각각을 rest 요청으로 만듬
            

            결과적으로, 어느정도 관계성을 유지하면서 소스코드의 방대성이 해소되게 됨

PostMan Enveroments 설정시에 Confrict가 뜰 경우 문제
    일반적으로 환경변수의 Initial Value를 설정할 경우, Current Value가 자동으로 설정되어서 아무 문제 없이 사용할 수 있음
    
    요청 디렉토리를 변경하는 등을 할 경우, Initial Value를 설정할 때 Confrict가 발생했다고 떠서 Current Value가 변경되지 않을 수 있음
    이럴 경우, 의도적으로 작동되지 않으므로 수동으로 Current Value를 설정해줘야함